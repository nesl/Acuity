# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from NESLMessages/Person.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import NESLMessages.msg

class Person(genpy.Message):
  _md5sum = "07061084615db4a1b1a7a2a5b8b45019"
  _type = "NESLMessages/Person"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[] colorArr
int32 personID
NeslCoord personCoord
bool accountedFor
bool talking
float32 bbx
float32 bby
float32 bbz

================================================================================
MSG: NESLMessages/NeslCoord
float64 x
float64 y
float64 z
"""
  __slots__ = ['colorArr','personID','personCoord','accountedFor','talking','bbx','bby','bbz']
  _slot_types = ['float64[]','int32','NESLMessages/NeslCoord','bool','bool','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       colorArr,personID,personCoord,accountedFor,talking,bbx,bby,bbz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Person, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.colorArr is None:
        self.colorArr = []
      if self.personID is None:
        self.personID = 0
      if self.personCoord is None:
        self.personCoord = NESLMessages.msg.NeslCoord()
      if self.accountedFor is None:
        self.accountedFor = False
      if self.talking is None:
        self.talking = False
      if self.bbx is None:
        self.bbx = 0.
      if self.bby is None:
        self.bby = 0.
      if self.bbz is None:
        self.bbz = 0.
    else:
      self.colorArr = []
      self.personID = 0
      self.personCoord = NESLMessages.msg.NeslCoord()
      self.accountedFor = False
      self.talking = False
      self.bbx = 0.
      self.bby = 0.
      self.bbz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.colorArr)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.colorArr))
      _x = self
      buff.write(_get_struct_i3d2B3f().pack(_x.personID, _x.personCoord.x, _x.personCoord.y, _x.personCoord.z, _x.accountedFor, _x.talking, _x.bbx, _x.bby, _x.bbz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.personCoord is None:
        self.personCoord = NESLMessages.msg.NeslCoord()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.colorArr = s.unpack(str[start:end])
      _x = self
      start = end
      end += 42
      (_x.personID, _x.personCoord.x, _x.personCoord.y, _x.personCoord.z, _x.accountedFor, _x.talking, _x.bbx, _x.bby, _x.bbz,) = _get_struct_i3d2B3f().unpack(str[start:end])
      self.accountedFor = bool(self.accountedFor)
      self.talking = bool(self.talking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.colorArr)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.colorArr.tostring())
      _x = self
      buff.write(_get_struct_i3d2B3f().pack(_x.personID, _x.personCoord.x, _x.personCoord.y, _x.personCoord.z, _x.accountedFor, _x.talking, _x.bbx, _x.bby, _x.bbz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.personCoord is None:
        self.personCoord = NESLMessages.msg.NeslCoord()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.colorArr = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 42
      (_x.personID, _x.personCoord.x, _x.personCoord.y, _x.personCoord.z, _x.accountedFor, _x.talking, _x.bbx, _x.bby, _x.bbz,) = _get_struct_i3d2B3f().unpack(str[start:end])
      self.accountedFor = bool(self.accountedFor)
      self.talking = bool(self.talking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i3d2B3f = None
def _get_struct_i3d2B3f():
    global _struct_i3d2B3f
    if _struct_i3d2B3f is None:
        _struct_i3d2B3f = struct.Struct("<i3d2B3f")
    return _struct_i3d2B3f
