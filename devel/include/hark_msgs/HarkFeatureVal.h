// Generated by gencpp from file hark_msgs/HarkFeatureVal.msg
// DO NOT EDIT!


#ifndef HARK_MSGS_MESSAGE_HARKFEATUREVAL_H
#define HARK_MSGS_MESSAGE_HARKFEATUREVAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hark_msgs
{
template <class ContainerAllocator>
struct HarkFeatureVal_
{
  typedef HarkFeatureVal_<ContainerAllocator> Type;

  HarkFeatureVal_()
    : id(0)
    , length(0)
    , data_bytes(0)
    , featuredata()  {
    }
  HarkFeatureVal_(const ContainerAllocator& _alloc)
    : id(0)
    , length(0)
    , data_bytes(0)
    , featuredata(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _length_type;
  _length_type length;

   typedef int32_t _data_bytes_type;
  _data_bytes_type data_bytes;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _featuredata_type;
  _featuredata_type featuredata;





  typedef boost::shared_ptr< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> const> ConstPtr;

}; // struct HarkFeatureVal_

typedef ::hark_msgs::HarkFeatureVal_<std::allocator<void> > HarkFeatureVal;

typedef boost::shared_ptr< ::hark_msgs::HarkFeatureVal > HarkFeatureValPtr;
typedef boost::shared_ptr< ::hark_msgs::HarkFeatureVal const> HarkFeatureValConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hark_msgs::HarkFeatureVal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hark_msgs::HarkFeatureVal_<ContainerAllocator1> & lhs, const ::hark_msgs::HarkFeatureVal_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.length == rhs.length &&
    lhs.data_bytes == rhs.data_bytes &&
    lhs.featuredata == rhs.featuredata;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hark_msgs::HarkFeatureVal_<ContainerAllocator1> & lhs, const ::hark_msgs::HarkFeatureVal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hark_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a91db0f9f140ce90dece0bff7d606075";
  }

  static const char* value(const ::hark_msgs::HarkFeatureVal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa91db0f9f140ce90ULL;
  static const uint64_t static_value2 = 0xdece0bff7d606075ULL;
};

template<class ContainerAllocator>
struct DataType< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hark_msgs/HarkFeatureVal";
  }

  static const char* value(const ::hark_msgs::HarkFeatureVal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"int32 length\n"
"int32 data_bytes\n"
"float32[] featuredata\n"
;
  }

  static const char* value(const ::hark_msgs::HarkFeatureVal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.length);
      stream.next(m.data_bytes);
      stream.next(m.featuredata);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HarkFeatureVal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hark_msgs::HarkFeatureVal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hark_msgs::HarkFeatureVal_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.length);
    s << indent << "data_bytes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.data_bytes);
    s << indent << "featuredata[]" << std::endl;
    for (size_t i = 0; i < v.featuredata.size(); ++i)
    {
      s << indent << "  featuredata[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.featuredata[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HARK_MSGS_MESSAGE_HARKFEATUREVAL_H
